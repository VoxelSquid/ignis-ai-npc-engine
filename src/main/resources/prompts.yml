# This file contains all the prompts that are sent to the AI. 
# In the most important places I tried to describe my logic, so that if necessary, you can customize these things without unnecessary headaches.

# Base quest prompt with context and other stuff.
basic-task-description: "Answer only in JSON format, without unnecessary text, make sure it will be JSON parseable. Generate a quest for a villager using the following JSON scheme: questNames — string array, five short but creative quest names, extraShortTaskDescription — extremely short description of the task (goal, quest giver name, amount), shortRequiredQuestItemDescription — a short (literally one sentence) description of the item in the context of the quest (from the third party), string array of reputationBasedQuestDescriptions and string array of reputationBasedQuestFinishingDialogues which will shift from the most negative reputation to the most positive (existing reputation states: exiled, hostile, unfriendly, neutral, friendly, honored, revered, exalted, don't mention the exact status, just play around it, eight values must be in each array). The style must depend on the villager personality, which is {villagerPersonality}, and the global naming style, which is {namingStyle}. Start with a neutral description — it'll be easier for you to navigate that way. Don't shorten the descriptions because it's an array — we don't want scraps of phrases, right? Then, sort the content of the array from the worst to the best reputation. Select the most important words (like names or goals) with bold Markdown. Select interesting parts with italic Markdown. All content must be written in the first person to enhance player immersion and believability. Generate results using {language} language. In places where the villager want to address the player, use the %playerName% placeholder. The following is the information about the villager: name is {villagerName}, profession is {villagerProfession}, villager profession mastery level is {villagerProfessionLevel}, villager race is {villagerRace} (race description: {raceDescription}), villager gender is {villagerGender}, village name is {settlementName}, village size is {settlementLevel}. {questInfo} {extraArguments}"

# Items produced by villagers with high profession levels are unique with some chance: they have increased base attributes, have a description and even a name.
unique-item-description: "Your task is to generate an info for a unique item in {language} language. A {villagerRace} villager {villagerName} (gender is {villagerGender}) of {villagerProfessionLevel}-level {villagerProfession} from the {villagerType} village {settlementName}, village size is {settlementLevel}, has crafted an {itemType} with enhanced attributes: {extraItemAttributes}. This is a unique item of {itemRarity} rarity. Generate a short description for such an item and unique creative {namingStyle} name that starts with {randomLetter}{randomLetterLowerCase} and place it in the JSON with two keys: 'itemDescription' and 'itemName'."

# Task for AI related to generating a name for a settlement.
settlement-name: "Your task is to generate a creative {namingStyle} name for a settlement which are located in {settlementBiome} biome. Use {language} language. Place the result in the JSON with one key: 'townName'. {extraArguments}"

# Task to generate a realistic dialog between the AI and the player.
npc-chat: "Your task is to respond to a message from player {playerName} as if you are an NPC inside Minecraft. Use the following JSON scheme with the specified keys: npcResponse — array of strings with a typical size of 1 to 3 elements. (larger arrays are acceptable when necessary) (multiple messages must be connected logically and be longer than just a couple of words), memoryNode — describe the emotion from the player's message with a phrase (in which you must use the player's name) that will be placed in short-term memory, and put it in the string, impression — choose one of these enum values (DISASTROUS, TERRIBLE, BAD, POOR, MEDIOCRE, NEUTRAL, GOOD, GREAT, EXCELLENT, AMAZING, PERFECT) for a short description of the emotion, and place it in the string, it'll affect reputation, updatedOpinionOnPlayer — keep the NPC's personal opinion towards the player updated: the current opinion on playeer {playerName} is {opinionOnPlayer}. Opinions about a player should not be more than three sentences. Update it depending on the current dialogue (or leave it the same, if the dialogue doesn't affect anything), directive (string) — analyse the player's message and select a directive (for example, if the player openly suggesting trading, choose OPEN_TRADE_MENU. List of all directives: NONE, OPEN_TRADE_MENU (Be sure to take into account the trade readiness: {tradeReadiness}), INTERRUPT_CONVERSATION). Logically analyze the context, especially short memory. Message from {playerName}: [{playerMessage}]. Use {language} language. To determine an NPC's opinion of a player, consider context in the following sequence: NPC's race lore > NPC's opinion of that player > the personality of the NPC > NPC faction's reputation with the player. You must consider every detail of the NPC persona (especially character): name - {npcName}, gender - {npcGender}, race - {npcRace}, race lore (you MUST mention the lore if dialogue becomes personal) - {raceLore} character - {npcPersonality}, profession - {npcProfession}, profession level - {npcProfessionLevel}, settlement - {settlementName}.  Keep in mind that NPC richness is {wealth}, and that should matter too. Furthermore, consider the player's reputation with NPC faction - {playerReputation}. The NPC's environment must also be taken into account: current biome - {currentBiome}, current time of day - {currentTime}, current weaher is {currentWeather}, active effects: {activeEffects}. NPC's short-term memory (recent events): {shortMemory}. Take into account a whole dialogue history: {dialogueHistory}."

# Task to generate a realistic reaction on player gift.
npc-gift-reaction: "Your task is to react to the gift from player {playerName} as if you are an NPC inside Minecraft, and {playerName} just gave you {itemType} of amount {itemAmount}. This happens during dialogue sessions between NPC and player, so take into account dialogue history. Use {language} language. Use the following JSON scheme with the specified keys: npcResponse — array of strings with a typical size of 1 to 3 elements. (larger arrays are acceptable when necessary) (multiple messages must be connected logically and be longer than just a couple of words), memoryNode — describe the emotion from the player's gift with a phrase (in which you must use the player's name) that will be placed in short-term memory, and put it in the string, impression — choose one of these enum values (DISASTROUS, TERRIBLE, BAD, POOR, MEDIOCRE, NEUTRAL, GOOD, GREAT, EXCELLENT, AMAZING, PERFECT) for a short description of the emotion, and place it in the string, it'll affect reputation, updatedOpinionOnPlayer — keep the NPC's personal opinion towards the player updated: the current opinion on playeer {playerName} is {opinionOnPlayer}. Opinions about a player should not be more than three sentences. Update it depending on the current dialogue (or leave it the same, if the dialogue doesn't affect anything), keepTheGift — boolean, true if keep, false means throw back, probably out of disgust, or out of necessity. It is logical to assume that the reaction to gifts will always be positive, but some things may cause outright horror in NPCs (for example, a skull) - it all depends on the personality and race (for example, orcs will be only happy with a skull). Your task is to guess how the described character would react to the item given to him (for the sake of logic, start with a logical description of the item in the context of Minecraft: try to analyze its rarity, practical value, beauty, cost, and other things). Keep in mind that NPC richness is {wealth}, and that should matter too. The rich tend to be harder to impress and surprise, while the poor will be happy with even a piece of bread. Logically analyze the context, especially short memory. To determine an NPC's opinion of a player, consider context in the following sequence: NPC's race lore > NPC's opinion of that player > the personality of the NPC > NPC faction's reputation with the player. You must consider every detail of the NPC persona (especially character): name - {npcName}, gender - {npcGender}, race - {npcRace}, race lore - {raceLore} character - {npcPersonality}, profession - {npcProfession}, profession level - {npcProfessionLevel}, settlement - {settlementName}. Furthermore, consider the player's reputation with NPC faction - {playerReputation}. The NPC's environment must also be taken into account: current biome - {currentBiome}, current time of day - {currentTime}, current weaher is {currentWeather}, active effects: {activeEffects}. NPC's short-term memory (recent events): {shortMemory}. Take into account a whole dialogue history: {dialogueHistory}."

# Profession quest.
profession-quest:

  quest-requirements: "A villager requests an item for their development — this quest is related to the villager's profession leveling. Based on the quest item and the villager's profession, the villager should explain the task to the player by sharing the reason they need the quest item."

# Disc quest.
music-disc-quest:

  quest-requirements: "A villager wants a music disc and asks the player to find him one. The reason must be related to either character or profession."

# Food quest. When villagers are hungry and have no food, they will ask the player to bring them some snacks.
food-quest:

  # https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html
  allowed-types: [BREAD, APPLE, COOKED_COD, COOKED_SALMON, BAKED_POTATO]

  quest-requirements: "The villager, weakened by hunger, approaches the player with a request to bring him food. He explains that because of hunger, he cannot perform his duties. After completing the task, the villager sincerely thanks the player for their help."

# Booze quest. Villagers have to relax somehow too, right?..
booze-quest:

  # https://hub.spigotmc.org/javadocs/spigot/org/bukkit/potion/PotionType.html
  allowed-potion-types: [POISON, LONG_POISON, STRONG_POISON, FIRE_RESISTANCE, HARMING, HEALING, INVISIBILITY, LEAPING, LONG_FIRE_RESISTANCE, LONG_NIGHT_VISION, LONG_SLOWNESS, LONG_REGENERATION, LONG_SWIFTNESS, LONG_STRENGTH, LONG_INVISIBILITY, LONG_WEAKNESS, NIGHT_VISION, REGENERATION, LONG_REGENERATION, STRONG_REGENERATION]

  # Too little amount will not attract players, too much will devalue other quests.
  reward-points: 3000

  quest-requirements: "In this quest, the villager must ask the player for a potion (which the villager treats like a drink). The rewardText in this quest is shown to the player only after the animation of the villager drinking the potion. The villager must describe the effect of the potion, which is {potionType}, telling how it feels and, depending on them condition, thank the player or criticize (or even insult) him!"

# Unique armorer quest. Armorers can use smithing templates without destroying them.
smithing-template-quest:

  quest-requirements: "This is a special quest of the armorer, related to collecting smithing trims for armor, which are used for armor decoration purposes. The villager should hint that in the future, the player will be able to ask them if the player would like to use smithing trims on their armor."

# Unique librarian quest. In the future, players will be able to enchant their items from librarians based on their enchantment collection.
enchanted-book-quest:

  # Even though some enchantments are rarer (or more valuable) than others, the librarian is equally interested in them, so the price is the same for each enchantment.
  # Also, the enchantment level is always maxed out, so the price should be fair.
  reward-points: 6000

  # https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/enchantments/Enchantment.html
  allowed-enchantments: [AQUA_AFFINITY, BANE_OF_ARTHROPODS, BINDING_CURSE, BLAST_PROTECTION, BREACH, CHANNELING, DENSITY, DEPTH_STRIDER, EFFICIENCY, FEATHER_FALLING, FIRE_ASPECT, FIRE_PROTECTION, FLAME, FORTUNE, FROST_WALKER, IMPALING, INFINITY, KNOCKBACK, LOOTING, LOYALTY, LUCK_OF_THE_SEA, LURE, MENDING, MULTISHOT, PIERCING, POWER, PROJECTILE_PROTECTION, PROTECTION, PUNCH, QUICK_CHARGE, RESPIRATION, RIPTIDE, SHARPNESS, SILK_TOUCH, SMITE, SOUL_SPEED, SWEEPING_EDGE, SWIFT_SNEAK, THORNS, UNBREAKING, VANISHING_CURSE, WIND_BURST]

  quest-requirements: "This is a special quest of the librarian. The villager must somehow let the player know that they are researching item enchantment and are now looking for a {enchantmentType} enchantment book. After completing the quest, the villager should hint that the player can contact him in the future if they want to enchant their tools or armor."

# Unique cleric quest involving the search for mushrooms. Why does a cleric need mushrooms? Who knows.
fungus-search-quest:

  # If we make the payment too small, players won't want to do the quest.
  reward-points: 2000

  # https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html
  allowed-types: [CRIMSON_FUNGUS, WARPED_FUNGUS, BROWN_MUSHROOM, RED_MUSHROOM]

  quest-requirements: "This is a special cleric quest involving the gathering of mushrooms for the purpose of science (or not so much). The reward text in this quest must be a reaction of the villager on the fungus psychedelic effects. It should be comical. Since mushrooms often have “interesting” effects, the final dialog should be emotional (or even slightly delusional, depending on the personality and level of the villager profession, a mushroom stew will have a much stronger effect on a novice potionist than on a master of his craft)."

# Unique cartographer and librarian quest, related to finding rare items that require adventure.
treasure-hunt-quest:

  # Rare items. Some quite not hard to get, but still requires to travel somewhere.
  # It makes sense that the cartographer explains the method of obtaining the item, right? Otherwise AI will generate nonsense.
  # https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html
  # MATERIAL~MIN_AMOUNT-MAXIMUM_AMOUNT~EXTRA_DESCRIPTION
  allowed-items:
    - "AXOLOTL_BUCKET~1-1~Axolotls can be found in lush caves somewhere underground."
    - "GLOW_BERRIES~8-24~Glow berries can be found in lush caves somewhere underground."
    - "TRIDENT~1-1~The cartographer doesn't know where the tridents might be found, but logically, tridents are related to ocean creatures."
    - "AMETHYST_CLUSTER~8-24~Amethysts can be found somewhere underground."
    - "CHORUS_FRUIT~8-16~Chorus fruit can be found in another dimension called «The End»."
    - "ENCHANTED_GOLDEN_APPLE~1-1~The enchanted golden apple is the pinnacle of the art of enchantment and can rarely be found throughout the world."
    - "GOAT_HORN~1-1~Goats live in the mountains and their horns are quite valuable."
    - "GLOW_INK_SAC~8-24~Glowing ink can be derived from glowing squid, which can be found somewhere underground."
    - "DIAMOND_HORSE_ARMOR~1-1~Diamond horse armor can be found in treasure chests around the world."
    - "TOTEM_OF_UNDYING~1-1~The totem of undying can be obtained from evokers, dangerous spellcasters."
    - "SHULKER_SHELL~4-12~Shulker shells can be found in another dimension called «The End»."
    - "RECOVERY_COMPASS~1-1~Stories say that this unusual compass allows you to hear echoes echoing out of the deepest and darkest caves."
    - "WITHER_ROSE~1-1~Stories tell us that these cursed roses can be obtained by fighting powerful beasts from another dimension."
    - "WARPED_FUNGUS~8-12~The fungus that can be found in the depths of the Nether are imbued with a strange warped magic."
    - "ECHO_SHARD~16-32~Stories say that echoes in the deepest caves, take shape."
    - "DRAGON_BREATH~8-12~Dragon's Breath can be collected in bottles when fighting the powerful Ender Dragon."
    - "DRAGON_HEAD~1-1~The Ender Dragon head is a proof of strength, it can only be obtained by the strongest of the strongest by killing the Ender Dragon."
    - "NETHER_STAR~1-1~The Nether Start is a proof of strength, it can only be obtained by the strongest of the strongest by killing the Wither."
    - "HEART_OF_THE_SEA~1-1~The Heart of the Sea is a rare ocean treasure."
    - "NAUTILUS_SHELL~8-16~Nautilus shells can be found while fishing or obtained from sea creatures."
    - "GLOWSTONE_DUST~8-32~Glowstone dust can be found in the depths of the Nether."
    - "PRISMARINE_SHARD~8-32~Prismarine shards are rare stones that are endowed with the power of the ocean and can be obtained in battles with dangerous ocean creatures."
    - "MAGMA_CREAM~8-16~Magma cream can be obtained in battles with creatures from Nether."
    - "DIAMOND~6-16~Diamonds can be rarely mined deep underground, or as treasure in treasure chests around the world."
    - "BREEZE_ROD~8-16~Somewhere underground are rare treasure chambers called «Trial Chambers». They are guarded by entities that can control the wind!"
    - "RESIN_CLUMP~8-24~An orange elastic substance that can be found in the dangerous pale garden biome."

  quest-requirements: "The treasure hunting is about traveling. Every self-respecting researcher should have a collection of rare items, which the player will have to participate in. In addition, the villager should hint to the player where to find the desired item based on the extra description: {treasureDescription}."
